// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NavigationPlatform.JourneyService.Infrastructure.Persistance;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NavigationPlatform.JourneyService.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250717123558_InitalMigration")]
    partial class InitalMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.Journey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("ArrivalLatitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("ArrivalLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("ArrivalLongitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDailyGoalAchieved")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<decimal>("RouteDistanceKm")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("StartLatitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("StartLocation")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("StartLongitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<int>("TransportationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("journeys", (string)null);
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.JourneyShare", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SharedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SharedByUserId")
                        .HasMaxLength(128)
                        .HasColumnType("uuid");

                    b.Property<Guid>("SharedWithUserId")
                        .HasMaxLength(128)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("shared_journeys", (string)null);
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.PublicJourney", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasMaxLength(128)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<string>("PublicToken")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("public_journeys", (string)null);
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.SharingAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("JourneyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TargetUserId")
                        .HasMaxLength(128)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(128)
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("JourneyId");

                    b.ToTable("sharing_audit_logs", (string)null);
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.JourneyShare", b =>
                {
                    b.HasOne("NavigationPlatform.JourneyService.Domain.Entities.Journey", "Journey")
                        .WithMany("Shares")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.PublicJourney", b =>
                {
                    b.HasOne("NavigationPlatform.JourneyService.Domain.Entities.Journey", "Journey")
                        .WithMany("PublicLinks")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.SharingAuditLog", b =>
                {
                    b.HasOne("NavigationPlatform.JourneyService.Domain.Entities.Journey", "Journey")
                        .WithMany("AuditLogs")
                        .HasForeignKey("JourneyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Journey");
                });

            modelBuilder.Entity("NavigationPlatform.JourneyService.Domain.Entities.Journey", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("PublicLinks");

                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
